ANALYSIS {    

$ECHO NONE
$IO OUTPUT GEOMETRY\BALL\COMMERCIAL\SIMPLE_ANALYSIS.CSV +FILE(10)
$END
$SCR 1
EMISSION (um), N_LENS, LENS_DIA (um), EFF (um), BFL (um), PDMS_CHAN_LENS (um), PDMS_LENS_DET (um), COAT_REFL , AIR_GAP (um), WD_PDMS, DET_RAD (um)
$SCR 1
\EM_WAVE.\, \N_LENS.\ , \LENS_DIA.\, \EFL.\ , \BFL.\ ,\PDMS_CHAN_LENS.\ , \PDMS_LENS_DET.\ , \COAT_REFL.\, \AIR_GAP.\, \WD_PDMS.\, \DET_RAD.\
$SCR 1
  FLUX VS AOI ON BALL
  $SCR 1
  AOI, FLUX
$IO OUTPUT CLOSE
$ECHO
    
    !! ANGLE OF INCIDENCE ON BALL LENS
    HISTORY PX
    INTERSECTS DETECTOR INT_DET
    
    $ITER AOI 0 85 -18 TFLUX
    {
     ANGLE BALL GT (AOI) SETHIGH  !! Store all paths GT angle in SETHIGH
     ANGLE BALL LT (AOI+5) SETLOW  !! Store all paths LT angle+1 in SETLOW
     AND SETHIGH SETLOW INT_BALL !! Store all paths in SETALL that exist in both SETHIGH & SETLOW
     AND INT_BALL INT_DET LENS_PATH
     SUMMARY LENS_PATH  !! Get flux information for all paths in SETALL
    
     $GRAB 'Total Flux' 0 1 TFLUX  !! Assign to TFLUX to be stored in iter.dis
     &REG TFLUX AOI
     
      $ECHO NONE
      $IO OUTPUT GEOMETRY\BALL\COMMERCIAL\SIMPLE_ANALYSIS.CSV +FILE(10)
      $END
      $SCR 1
      \AOI.\, \TFLUX.\
      $IO OUTPUT CLOSE
      $ECHO
    }

    RETURN !! Ends PX mode
    DISPLAY ITER.DIS  !! TFLUX vs. TESTANGLE
    GRAPH 'Flux per Angle of Incidence'
    RETURN
}


$ECHO NONE
$IO OUTPUT GEOMETRY\BALL\COMMERCIAL\SIMPLE.CSV +FILE(10)
$END
$SCR 1
150um sapphire - testing ball model, CY5 fluorophore
$SCR 1
EX_POWER (W), EXCITATION (um), EMISSION (um), N_MOLECULES_VOL, SPOT_DIA, QY, N_LENS, LENS_DIA (um), EFF (um), PDMS_CHAN_LENS (um), PDMS_LENS_DET (um), WD_PDMS, AIR_GAP (um), EX_ANGLE, EX_XSHIFT, DET_RAD (um), EX_DET_RAYS, EX_DET_FLUX, EX_SPOT_RAYS, EX_SPOT_FLUX, SPOT_DET_RAYS, SPOT_DET_FLUX, THETA, SNR
$IO OUTPUT CLOSE
$ECHO



!!$ITER DET_RAD 100 200 -2 NUMBEROFRAYS
!!{
!!  &REG DET_RAD

  CONSIDER ALL
  SYSTEM NEW
  RESET   
  
  $ECHO NONE 

  !! Fundamental constants
  PLANCK=6.6267e-34
  C_LIGHT=3e+8
  PI=ACOS(-1)
  
  !! OPTICAL
  FRESNEL AVE
  EM_WAVE=0.670               !! emission wavelength
  EX_WAVE=0.650               !! emission wavelength
  EX_POW=400e-6               !! excitation power
  
  QY=0.3                              !! quantum yeild
  ME=250000                           !! molar extinction
  AB_CS=(ME)*3.82E-21*100000000       !! absorption cross section (um^2/molecule)  

  SPOT_DIA=10
  N_MOLECULES_VOL=0.2                       !! number of molecules in 1 um^3
  SPOT_VOL=(4/3)*(PI)*((SPOT_DIA)/2)^3
  N_MOLECULES=(SPOT_VOL)*(N_MOLECULES_VOL)  !!number of molecules in optical path
   
  PH_ENERGY=(PLANCK)*(C_LIGHT)/((EX_WAVE)*(10^-6))  
  EX_FLUX=(EX_POW)/(PH_ENERGY)                  !! Let flux represent #source photons/second 
  FLUX_RAY=(EX_FLUX)/((PI)*((SPOT_DIA)/2)^2)    !! per um area      
  
  
  EX_RAYS=300                   !! (EX_RAYS)^2 * NPHOTONS=EX_FLUX   
  EM_RAYS=10000                 !! EM_RAYS * NPHOTONS=EM_FLUX 
      
  !! Define units and wavelength
  UNITS MICRONS 'Watts" 
  WAVELENGTHS (EM_WAVE) UM 

  !! Define media
  N_LENS=1.768
  N_EFF=(N_LENS)/1.43
  N_CORE=1.46
  N_CLAD=1.44
  MEDIA ; 1.43     'PDMS'
  MEDIA ; 1.51     'GLASS'
  MEDIA ; 1.33     'WATER'
  MEDIA ; (N_LENS) 'BALL'
  MEDIA ; (N_CLAD) 'DOPED 
  MEDIA ; (N_CORE) 'SILICA'
  
                      
  !! Including 
  SPLIT 1500 MONTECARLO       !! monte carlo simulation
  LEVEL 1000 OFF 
  FRESNEL AVE                 !! fresnel equation

  !! Coating properties
  COATING PROPERTIES 0; 0 1 'TRANSMIT' 
  COATING PROPERTIES 0; 0 0 'ABSORB' 
  COATING PROPERTIES 0; 1 0 'REFLECT' 
              
  !! Simulation Variables
  
  !! Chip variables
  CHIP_LENGTH=5000            !! Length and width of microchip
  PDMS_THICK_BOTTOM=300       !! Total thickness of PDMS adjacent/below the channels  
  GLASS_THICK=200             !! Total thickness of glass layer
  CHAN_WIDTH=25
  
  !! Lens dimensions
  LENS_DIA=150                 !! Diamter of the lens
  LENS_RAD=(LENS_DIA)/2  
  
      TERM_A=(N_EFF)-1
      TERM_B=2/(LENS_RAD)
      TERM_C=((TERM_A)*(LENS_DIA))/((N_EFF)*(LENS_RAD)*(LENS_RAD))
      LENS_P=(TERM_A)*((TERM_B)-(TERM_C))

  EFL=1/(LENS_P)
  BFL=(EFL)-(LENS_RAD)
  
  PDMS_CHAN_LENS=(BFL)  !! Thickness of PDMS layer above the channel
  PDMS_LENS_DET=170
  
  WD_PDMS=(PDMS_LENS_DET)+(PDMS_CHAN_LENS)+(LENS_DIA)
  
  AIR_GAP=2                   !! air gap beneath detector
  DET_RAD=200
   
  !! Bounding Surface 
  SURFACE 
  PLANE Z (WD_PDMS)+(AIR_GAP) 0 0 ELLIPSE (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 'BoundingPlane' 
  !!PLOT SURFACE 

  !! Beginning of geometry modeling 
  ENT OBJ 
  
  !! Channel 
  PLANE Z (CHAN_WIDTH)/2 RECTANGLE (CHIP_LENGTH)/2.2 (CHAN_WIDTH)/2 'CHANNEL.TOP' 
  INTERFACE COATING BARE WATER PDMS 
  
  PLANE Z -(CHAN_WIDTH)/2 RECTANGLE (CHIP_LENGTH)/2.2 (CHAN_WIDTH)/2 'CHANNEL.B0TTOM' 
  INTERFACE COATING BARE WATER PDMS 
  
  PLANE Y 0 RECTANGLE (CHAN_WIDTH)/2 (CHIP_LENGTH)/2.2 'CHANNEL.BACK' 
  INTERFACE COATING BARE WATER PDMS
  SHIFT Y (CHAN_WIDTH)/2 
  
  PLANE Y 0 RECTANGLE (CHAN_WIDTH)/2 (CHIP_LENGTH)/2.2 'CHANNEL.FRONT' 
  INTERFACE COATING BARE WATER PDMS
  SHIFT Y -(CHAN_WIDTH)/2 
  
  PLANE X 0 RECTANGLE (CHAN_WIDTH)/2 (CHAN_WIDTH)/2 'CHANNEL.RIGHT' 
  INTERFACE COATING BARE WATER PDMS 
  SHIFT X (CHIP_LENGTH)/2.2
  
  PLANE X 0 RECTANGLE (CHAN_WIDTH)/2 (CHAN_WIDTH)/2 'CHANNEL.LEFT' 
  INTERFACE COATING BARE WATER PDMS 
  SHIFT X -(CHIP_LENGTH)/2.2 
 
  !! Glass-layer (substrate)
  TUBE Z -(PDMS_THICK_BOTTOM)  (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 -(PDMS_THICK_BOTTOM)-(GLASS_THICK) (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 0 0 'GLASS.SIDE' 
  INTERFACE COATING BARE GLASS AIR 
          
  PLANE Z -(PDMS_THICK_BOTTOM)-(GLASS_THICK) ELLIPSE (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 'GLASS.BOTTOM' 
  INTERFACE COATING BARE GLASS AIR  
  
  !! PDMS-layer
  TUBE Z (WD_PDMS) (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 -(PDMS_THICK_BOTTOM) (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 0 0 'MANTEL.SIDE' 
  INTERFACE COATING BARE PDMS AIR 
  
  PLANE Z -(PDMS_THICK_BOTTOM) ELLIPSE (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 'MANTEL.BOTTOM' 
  INTERFACE COATING BARE PDMS GLASS 
  
  !! Air Gap
  PLANE Z (WD_PDMS) ELLIPSE (CHIP_LENGTH)/2 (CHIP_LENGTH)/2 'AIR_GAP' 
  INTERFACE COATING BARE PDMS AIR 
  
  !! Detector 
  PLANE Z (WD_PDMS)+(AIR_GAP) ELLIPSE (DET_RAD) (DET_RAD) 'DETECTOR' 
  INTERFACE COATING ABSORB DOPED AIR     
  
!!!!!! Multimode fiber
  CORE=125                    !! core diameter
  CLADDING=250                !! cladding diameter
  A2=0                           !! Rotation Angle 
  RATIO=1                     !! taper ratio
  CORETAPER=(CORE)/RATIO      !! diameter of tapered end
  CLADDINGTAPER=(CLADDING)/RATIO 
  F2LENGTH=850                !!taper length
  
  F2POSZ=(WD_PDMS)                              !! Z-position of MMF
  F2POSX=(DET_RAD)+(CLADDINGTAPER)/2            !! X-Shift of multimode fiber
  ANGLE=ATAN[(F2POSX)/(F2POSZ)]  !!43
  
  FIBER=5000                  !! length of remaining fiber
  
!! Multimode fiber 
  ENT OBJ 
  
!! Core 
TUBE Z (F2POSZ) (CORETAPER)/2 (CORETAPER)/2 (F2POSZ)+(FIBER) (CORE)/2 (CORE)/2 0 0 'MMF.CORE' 
    SHIFT X (F2POSX) 
    ROTATE Y (ANGLE) (F2POSZ) (F2POSX)-(CLADDINGTAPER)/2
    INTERFACE COATING BARE SILICA DOPED
    BOUNDS +1 

!! Cladding 
TUBE Z (F2POSZ) (CLADDINGTAPER)/2 (CLADDINGTAPER)/2 (F2POSZ)+(F2LENGTH) (CLADDING)/2 (CLADDING)/2 0 0 'MMF.CLADDING' 
    SHIFT X (F2POSX) 
    ROTATE Y (ANGLE) (F2POSZ) (F2POSX)-(CLADDINGTAPER)/2
    INTERFACE COATING ABSORB AIR DOPED
    BOUNDS +1 

!! Core bottom 
PLANE Z (F2POSZ) ELLIPSE (CLADDING) (CLADDING) 'MMF.CORE.BOTTOM' 
    SHIFT X (F2POSX) 
    INTERFACE COATING BARE PDMS SILICA 

!! Cladding bottom 
PLANE Z (F2POSZ) ELLIPSE (CLADDING) (CLADDING) 'MMF.CLADDING.BOTTOM' 
    SHIFT X (F2POSX) 
    INTERFACE COATING ABSORB PDMS DOPED 
    BOUNDS +.4 -.3 

!! Remaining fiber end 
PLANE Z (F2POSZ)+(F2LENGTH)+(FIBER) ELLIPSE (CLADDING)/2 (CLADDING)/2 (CORE)/(CLADDING) 'FIBER.TOP' 
    SHIFT X (F2POSX) 
    ROTATE Y (ANGLE) (F2POSZ) (F2POSX)-(CLADDINGTAPER)/2
    INTERFACE COATING ABSORB DOPED AIR

TUBE Z (F2POSZ)+(F2LENGTH) (CORE)/2 (CORE)/2 (F2POSZ)+(F2LENGTH)+(FIBER) (CORE)/2 (CORE)/2 0 0 'FIBER.CORE' 
    SHIFT X (F2POSX) 
    ROTATE Y (ANGLE) (F2POSZ) (F2POSX)-(CLADDINGTAPER)/2
    INTERFACE COATING BARE SILICA DOPED  

TUBE Z (F2POSZ)+(F2LENGTH) (CLADDING)/2 (CLADDING)/2 (F2POSZ)+(F2LENGTH)+(FIBER) (CLADDING)/2 (CLADDING)/2 0 0 'FIBER.CLADDING' 
    SHIFT X (F2POSX) 
    ROTATE Y (ANGLE) (F2POSZ) (F2POSX)-(CLADDINGTAPER)/2
    INTERFACE COATING ABSORB AIR DOPED 

!! Excitation Spot
ELLIPSOID (SPOT_DIA)/2 (SPOT_DIA)/2 (SPOT_DIA)/2 0 0 0 'EXCITE_SPOT'
INTERFACE COATING TRANSMIT WATER WATER
  
  !! Lens
  ENT OBJ

  ELLIPSOID 3@(LENS_RAD) 0 0 (EFL) 'BALL_LENS'
  INTERFACE COATING BARE PDMS BALL
  REDEFINE COLOR 1

      
  !!!!!!!!!!!!!!!!!!!      
    RAYS 0
    IMMERSE SILICA
    PARABASALS 4
    BEAMS COHERENT DIFFRACT
    WAVELENGTHS (EX_WAVE) UM
    WIDTHS 1.6
    GAUSSIAN Z -(F2POSZ)-(F2LENGTH) 0 0 (EX_RAYS) (EX_RAYS) 0 0 (SPOT_DIA)/2 (SPOT_DIA)/2
      SOURCE DIRECTION 0 0 1
      SHIFT X (F2POSX) 
      ROTATE Y (ANGLE) (F2POSZ) (F2POSX)
      ROTATE Y 180 0 0

    WINDOW Z X
    PIXELS 51
    TRACE PLOT OVERLAY
    PLOT FACETS 
    $VIEW 
    
    CONSIDER ONLY EXCITE_SPOT    
    STATS ALL      
    $GRAB 'TOTAL' 0 1 EX_SPOT_RAYS      
    $GRAB 'TOTAL' 0 2 EX_SPOT_FLUX
     
    CONSIDER ONLY DETECTOR    
    STATS ALL      
    $GRAB 'TOTAL' 0 1 EX_DET_RAYS       
    $GRAB 'TOTAL' 0 2 EX_DET_FLUX   
      
  !!!!!!!!!!!!!!!!!!!
  
  FLUOR_TOTAL=((FLUX_RAY)/(EX_SPOT_FLUX))*(QY)*(AB_CS)  !!photons/(s*molecule)

  $IF (FLUOR_TOTAL) GT 0 THEN

  EM_FLUX=(FLUOR_TOTAL)*(N_MOLECULES)                  !!photons/s 
  RAYS 0 
  IMMERSE WATER             !! light source is inside the water 
    
  EMITTING SPHEROID 0 0 0 (SPOT_DIA)/2 (SPOT_DIA)/2 (SPOT_DIA)/2 (EM_RAYS) 'FLUOROPHORE' ISO 
  FLUX TOTAL (EM_FLUX) 
  WAVELENGTHS (EM_WAVE) UM 
  HALT 10000 
  
    CONSIDER ALL 
    WINDOW Z X
    TRACE PLOT OVERLAY
    PLOT FACETS 
    $VIEW 
    
    CONSIDER ONLY DETECTOR 
    STATS ALL
    $GRAB 'TOTAL' 0 1 SPOT_DET_RAYS
    $GRAB 'TOTAL' 0 2 SPOT_DET_FLUX
        
  THETA=ACOS[1-(2*(SPOT_DET_RAYS)/(EM_RAYS))]
  $ENDIF

  
  $IF (EX_DET_FLUX) GT 0 THEN
    SNR=(SPOT_DET_FLUX)/(EX_DET_FLUX)
  $ELSE
    SNR=-1
  $ENDIF
  
!!WRITES TO TEXT FILE ON EACH PASS
$ECHO NONE
$IO OUTPUT GEOMETRY\BALL\COMMERCIAL\SIMPLE.CSV +FILE(10)   !! ALL SUCCESSIVE ITERATIONS
$END
$SCR 1
\EX_POW.\, \EX_WAVE.\, \EM_WAVE.\, \N_MOLECULES_VOL.\, \SPOT_DIA\, \QY.\, \N_LENS.\ , \LENS_DIA.\, \EFL.\ , \PDMS_CHAN_LENS.\ , \PDMS_LENS_DET.\ , \WD_PDMS.\, \AIR_GAP.\,  \ANGLE.\, \F2POSX.\, \DET_RAD.\, \EX_DET_RAYS.\, \EX_DET_FLUX.\, \EX_SPOT_RAYS.\, \EX_SPOT_FLUX.\, \SPOT_DET_RAYS.\, \SPOT_DET_FLUX.\, \THETA.\, \SNR.\
$IO OUTPUT CLOSE
$ECHO

!!}

RETURN
